管理以下檔案：

  vim files   即使用者的 ~/.vim 目錄，位置如 Vim 中 :echo $HOME 的輸出。
              已安裝許多 Vim 插件（2011-06-12 改由 vundle 管理）、語法等檔案（見 rsync-include）
  vimrc       系統 vimrc，通常在 vim --version 顯示的 system vimrc file
  zshrc       系統 zshrc，通常在 /etc/zshrc
  gitconfig   系統 git config
  (g)vimrc    另外安裝 gVim 的 vimrc


使用：

  初次使用時，請修改 paths.zsh 設定檔案位置（可參考 paths-example.zsh）。
  註：不想控管的檔案，可以不設定檔案位置，執行時會詢問是否跳過。

  執行 update.zsh      取得系統使用中的檔案，覆蓋此路徑內的檔案。
  執行 overwrite.zsh   以此路徑檔案更新系統內的檔案（危險）。


已知問題：

  Vim plugin：gsession 與 ShowMarks 有按鍵衝突，
  故已於 .vimrc 設定 >
    let g:gsession_non_default_mapping = 1
< 取消 gsession 預設的 mapping。


其他，不自動安裝的工具或設定：

  home_bin
    ~/bin 內的檔案
    需要將 ~/bin 加進 $path

  home_scripts
    ~/scripts 內的檔案

  home_misc_ubuntu
    其他 ~/ 目錄的檔案（ubuntu 用）
    .devilspie/gvim.ds  開啟 gVim 時自動將視窗最大化（需安裝 devil's pie）
    .local/share/applications/gvim.desktop  右鍵選單項目 gVim

  目前加入的工具：

    jslint
      此為 JSLint rhino 的 wrapper script（需要 java）
      修改自 http://www.jslint.com/rhino/
      使用方式：
        jslint file.js '{"option_key":value}'

    closure-compiler
      建議建立連結使用，例：
        ln -s ~/scripts/compiler-20100917.jar ~/bin/closure-compiler.jar


Modelines: {{{1
vim:tw=78:ft=help
